/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vista.resultado;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.TableRowSorter;
import vista.VentanaPrincipal;

/**
 *
 * @author JoseAntonio
 */
public class PanelUltRes extends javax.swing.JPanel {

    private List<Comparacion> comparaciones;
    private List<Comparacion> comparacionesOrdenadas;
    private TableRowSorter<TableModelResultados> sorter;
    private VentanaPrincipal padre;

    /**
     * Creates new form PanelUltRes
     */
    public PanelUltRes(String rutaComparaciones, List<Comparacion> comparaciones,VentanaPrincipal padre) {
        initComponents();
        this.padre = padre;
        this.comparaciones = comparaciones;
        this.comparacionesOrdenadas = this.comparaciones;
        TableModelResultados tablaModelo = new TableModelResultados(this.comparaciones);
        this.tabla.setModel(tablaModelo);
        this.sorter = new TableRowSorter<TableModelResultados>(tablaModelo);
        this.tabla.setAutoCreateRowSorter(true);
        this.tabla.setRowSorter(sorter);
        this.busqueda.getDocument().addDocumentListener(
                new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                newFilter();
            }

            public void insertUpdate(DocumentEvent e) {
                newFilter();
            }

            public void removeUpdate(DocumentEvent e) {
                newFilter();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        combo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        busqueda = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        DetailsB = new javax.swing.JButton();

        combo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Input Network", "Biological Database" }));
        combo.setSelectedIndex(0);

        jLabel1.setText("Search");

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);

        busqueda.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                busquedaInputMethodTextChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Last Results");

        DetailsB.setText("Detailed");
        DetailsB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DetailsBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 258, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(busqueda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(DetailsB)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(combo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DetailsB)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        if (evt.getClickCount() == 2) {
            JTable target = (JTable) evt.getSource();
            int columna = tabla.getColumnCount();            
            int lupa = tabla.getSelectedColumn();
            int fila = tabla.getSelectedRow();            
            int filaVerdadera = tabla.convertRowIndexToModel(fila);
            Comparacion c = this.comparaciones.get(filaVerdadera);
            Resultado u = new Resultado(c.getNombreDB(), c.getCoherencia(),c.getCoherenciaPPV(),c.getCoherenciaF(), c.getNombreInput(), c.getGenesComunes(), c.getNodosIN(), c.getNodosDB(), c.getArIN(), c.getArDB());
            u.setVisible(true);     
        }
    }//GEN-LAST:event_tablaMouseClicked

    private void busquedaInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_busquedaInputMethodTextChanged
        List<Comparacion> comp = leerComparacionesQueContengan(this.busqueda.getText(), (String) combo.getSelectedItem());
        TableModelResultados tablaModelo = new TableModelResultados(comp);
        this.tabla.setModel(tablaModelo);
    }//GEN-LAST:event_busquedaInputMethodTextChanged

    private void DetailsBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DetailsBActionPerformed
       
        int fila = tabla.getSelectedRow();            
        
        if (fila >= 0) {
             int columna = tabla.getColumnCount();            
            int lupa = tabla.getSelectedColumn();
            int filaVerdadera = tabla.convertRowIndexToModel(fila);
            Comparacion c = this.comparaciones.get(filaVerdadera);
            Resultado u = new Resultado(c.getNombreDB(), c.getCoherencia(),c.getCoherenciaPPV(),c.getCoherenciaF(), c.getNombreInput(), c.getGenesComunes(), c.getNodosIN(), c.getNodosDB(), c.getArIN(), c.getArDB());
            u.setVisible(true); 
        }else{
            JOptionPane.showMessageDialog(null, "You must select a row before click this button or double clik on a row to see detailled results", "WARNING", 0);
        }

    }//GEN-LAST:event_DetailsBActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton DetailsB;
    private javax.swing.JTextField busqueda;
    private javax.swing.JComboBox combo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables

    private List<Comparacion> leerComparacionesQueContengan(String texto, String string) {
        List<Comparacion> todas = this.getComparaciones();
        List<Comparacion> filtradas = new ArrayList<Comparacion>();
        for (int i = 0; i < todas.size(); i++) {
            if (string.compareToIgnoreCase("Input Network") == 0) {
                if (todas.get(i).getNombreInput().compareToIgnoreCase(texto) == 0) {
                    filtradas.add(todas.get(i));
                }
            } else {
                if (todas.get(i).getNombreDB().compareToIgnoreCase(texto) == 0) {
                    filtradas.add(todas.get(i));
                }
            }
        }
        if (filtradas.size() == 0) {
            filtradas = todas;
            JOptionPane.showMessageDialog(null, "There are not " + string + " with name.", "ERROR", 0);
        }
        return filtradas;
    }

    public List<Comparacion> getComparaciones() {
        return comparaciones;
    }

    private void newFilter() {
        RowFilter<TableModelResultados, Object> rf = null;
        //If current expression doesn't parse, don't update.
        try {
            rf = RowFilter.regexFilter(this.busqueda.getText(), this.combo.getSelectedIndex());
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        this.sorter.setRowFilter(rf);

    }

    public void cargarModeloTabla(String rutaComparaciones) {
        this.comparaciones = leerComparaciones(rutaComparaciones);
        this.comparacionesOrdenadas = this.comparaciones;
        TableModelResultados tablaModelo = new TableModelResultados(this.comparaciones);
        this.tabla.setModel(tablaModelo);
        this.sorter = new TableRowSorter<TableModelResultados>(tablaModelo);
        this.tabla.setAutoCreateRowSorter(true);
        this.tabla.setRowSorter(sorter);
        this.busqueda.getDocument().addDocumentListener(
                new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                newFilter();
            }

            public void insertUpdate(DocumentEvent e) {
                newFilter();
            }

            public void removeUpdate(DocumentEvent e) {
                newFilter();
            }
        });
        padre.cambiarTexto("Ready");
    }

    private List<Comparacion> leerComparaciones(String rutaComparaciones) {
        List<Comparacion> comp = new ArrayList<Comparacion>();
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;

        try {
            // Apertura del fichero y creacion de BufferedReader para poder
            // hacer una lectura comoda (disponer del metodo readLine()).
            archivo = new File(rutaComparaciones);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);

            // Lectura del fichero
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                Comparacion c = new Comparacion(partes[0], partes[1], Integer.parseInt(partes[2]), Integer.parseInt(partes[3]), Integer.parseInt(partes[4]), Integer.parseInt(partes[5]), Float.parseFloat(partes[6]), Float.parseFloat(partes[7]), Float.parseFloat(partes[8]), Float.parseFloat(partes[9]),Float.parseFloat(partes[10]),Integer.parseInt(partes[11]));
                comp.add(c);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // En el finally cerramos el fichero, para asegurarnos
            // que se cierra tanto si todo va bien como si salta 
            // una excepcion.
            try {
                if (null != fr) {
                    fr.close();
                    br.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return comp;
    }

    public List<Comparacion> getComparacionesOrdenadas() {
        return comparacionesOrdenadas;
    }

    public void setComparacionesOrdenadas(List<Comparacion> comparacionesOrdenadas) {
        this.comparacionesOrdenadas = comparacionesOrdenadas;
    }

    public TableRowSorter<TableModelResultados> getSorter() {
        return sorter;
    }

    public void setSorter(TableRowSorter<TableModelResultados> sorter) {
        this.sorter = sorter;
    }

    public JTable getTabla() {
        return tabla;
    }

    public void setTabla(JTable tabla) {
        this.tabla = tabla;
    }

    public void cambiarModelo(List<Comparacion> c) {
        this.comparaciones = c;
        this.comparacionesOrdenadas = this.comparaciones;
        TableModelResultados tablaModelo = new TableModelResultados(this.comparaciones);
        this.tabla.setModel(tablaModelo);
        this.sorter = new TableRowSorter<TableModelResultados>(tablaModelo);
        this.tabla.setAutoCreateRowSorter(true);
        this.tabla.setRowSorter(sorter);
        this.busqueda.getDocument().addDocumentListener(
                new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                newFilter();
            }

            public void insertUpdate(DocumentEvent e) {
                newFilter();
            }

            public void removeUpdate(DocumentEvent e) {
                newFilter();
            }
        });
    }
    
    public void ordenBusqueda(String orden){
        this.busqueda.setText("");
        this.busqueda.setText(orden);
    }
}