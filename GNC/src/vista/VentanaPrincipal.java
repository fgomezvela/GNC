/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import vista.about.About;
import Logica.HiloGNC;
import Pojo.IGRN;
import Pojo.LeeGRN;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Frame;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import vista.busqueda.BuscaArchivos;
import vista.log.Log;
import vista.resultado.Comparacion;
import vista.resultado.PanelUltRes;

/**
 *
 * @author JoseAntonio
 */
public class VentanaPrincipal extends JFrame {

    private boolean bbddSeleccionada = false;
    private boolean inputSeleccionada = false;
    private File archivoInput;
    private File archivoBD;
    private LeeGRN leeInput = new LeeGRN();
    private LeeGRN leeBD = new LeeGRN();
    private IGRN grnEntrada;
    private IGRN grnBD;
    private String carpetaGNC = System.getProperty("user.dir") + System.getProperty("file.separator") + "GNC";
    private String rutaComparaciones = System.getProperty("user.dir") + System.getProperty("file.separator") + "GNC" + System.getProperty("file.separator") + "Results";
    private String rutaInput = System.getProperty("user.dir") + System.getProperty("file.separator") + "GNC" + System.getProperty("file.separator") + "InputNetworks";
    private String rutaDB = System.getProperty("user.dir") + System.getProperty("file.separator") + "GNC" + System.getProperty("file.separator") + "BioDatabases";
    private String rutaMatrices = System.getProperty("user.dir") + System.getProperty("file.separator") + "GNC" + System.getProperty("file.separator") + "Matrices";
    private String rutaFicheroInput, rutaFicheroDB;
    private Frame f;
    private About about;
    private Log log;
    private String rutaHistorial = System.getProperty("user.home");
    private List<Comparacion> comparaciones;
    private PanelUltRes panelResultados;
    private BuscaArchivos buscaInput, buscaDB;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        comparaciones = leerComparaciones(rutaComparaciones + System.getProperty("file.separator") + "Results.txt");
        setTitle("GNC");
        this.StartB.setEnabled(true);
        panelResultados = new PanelUltRes(rutaComparaciones, comparaciones, this);
        resultadosP.add(panelResultados);
        this.setLocationRelativeTo(null);
        setIconImage(Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("iconoApp.png")));
        this.jLabel3.setText("Ready");
        this.rutaInputTF.setEditable(false);
        this.rutaDBTF.setEditable(false);
        this.log = new Log(this);
        logP.add(log);
    }

    public void cambiarTexto(String texto) {
        this.jLabel3.setText(texto);
        Color c = Color.red;
        if (texto.contains("Running")) {
            this.jLabel3.setForeground(Color.red);
        } else {
            this.jLabel3.setForeground(Color.black);
        }
    }

    public String getRutaFicheroInput() {
        return rutaFicheroInput;
    }

    public boolean isBbddSeleccionada() {
        return bbddSeleccionada;
    }

    public void setBbddSeleccionada(boolean bbddSeleccionada) {
        this.bbddSeleccionada = bbddSeleccionada;
    }

    public boolean isInputSeleccionada() {
        return inputSeleccionada;
    }

    public void setInputSeleccionada(boolean inputSeleccionada) {
        this.inputSeleccionada = inputSeleccionada;
    }

    public void setRutaFicheroInput(String rutaFicheroInput) {
        this.rutaFicheroInput = rutaFicheroInput;
        this.rutaInputTF.setText(rutaFicheroInput);
    }

    public Log getLog() {
        return log;
    }
   
    public String getRutaFicheroDB() {
        return rutaFicheroDB;
    }

    public void setRutaFicheroDB(String rutaFicheroDB) {
        this.rutaFicheroDB = rutaFicheroDB;
        this.rutaDBTF.setText(rutaFicheroDB);
    }

    public LeeGRN getLeeInput() {
        return leeInput;
    }

    public IGRN getGrnEntrada() {
        return grnEntrada;
    }

    public IGRN getGrnBD() {
        return grnBD;
    }

    public LeeGRN getLeeBD() {
        return leeBD;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        StartB = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        rutaInputTF = new javax.swing.JTextField();
        LoadInputB = new javax.swing.JButton();
        openINB = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        rutaDBTF = new javax.swing.JTextField();
        LoadDBB = new javax.swing.JButton();
        openDBB = new javax.swing.JButton();
        LogoP = new LogoPrograma();
        resultadosP = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        barra = new javax.swing.JProgressBar();
        logP = new javax.swing.JPanel();
        Menu = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(875, 700));
        setMinimumSize(new java.awt.Dimension(875, 700));
        setPreferredSize(new java.awt.Dimension(875, 700));
        setResizable(false);

        StartB.setText("Start");
        StartB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartBActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Input Network");

        LoadInputB.setText("Load New");
        LoadInputB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadInputBActionPerformed(evt);
            }
        });

        openINB.setText("Open");
        openINB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openINBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rutaInputTF, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LoadInputB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(openINB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rutaInputTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoadInputB)
                    .addComponent(openINB))
                .addGap(17, 17, 17))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Biological Database");

        LoadDBB.setText("Load New");
        LoadDBB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadDBBActionPerformed(evt);
            }
        });

        openDBB.setText("Open");
        openDBB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDBBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rutaDBTF, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LoadDBB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(openDBB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rutaDBTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LoadDBB)
                    .addComponent(openDBB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        LogoP.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout LogoPLayout = new javax.swing.GroupLayout(LogoP);
        LogoP.setLayout(LogoPLayout);
        LogoPLayout.setHorizontalGroup(
            LogoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        LogoPLayout.setVerticalGroup(
            LogoPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 94, Short.MAX_VALUE)
        );

        resultadosP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        resultadosP.setOpaque(false);
        resultadosP.setLayout(new java.awt.GridLayout(1, 0));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(51, 51, 51));
        jLabel3.setText("jLabel3");

        barra.setForeground(new java.awt.Color(0, 153, 0));

        logP.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        logP.setLayout(new java.awt.GridLayout(1, 0));

        jMenu4.setText("User Guide");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        Menu.add(jMenu4);

        jMenu3.setText("About");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });
        Menu.add(jMenu3);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(logP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel3))
                                    .addComponent(barra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StartB, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LogoP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultadosP, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(496, 496, 496))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LogoP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(barra, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addComponent(StartB, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(resultadosP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadInputBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadInputBActionPerformed

        JFileChooser fc = new JFileChooser(rutaHistorial);
        int resp = fc.showOpenDialog(this);
        if (resp == 0) {
            this.archivoInput = fc.getSelectedFile();
            this.rutaInputTF.setText(this.archivoInput.getAbsolutePath());
        }
        cambiarValor(inputSeleccionada);
        rutaFicheroInput = this.rutaInputTF.getText();
        rutaHistorial = rutaFicheroInput;
    }//GEN-LAST:event_LoadInputBActionPerformed

    public JProgressBar getBarra() {
        return barra;
    }

    public void setBarra(JProgressBar barra) {
        this.barra = barra;
    }
    
    private void LoadDBBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadDBBActionPerformed
        JFileChooser fc = new JFileChooser(rutaHistorial);
        int resp = fc.showOpenDialog(this);
        if (resp == 0) {
            this.archivoBD = fc.getSelectedFile();
            this.rutaDBTF.setText(this.archivoBD.getAbsolutePath());
        }
        cambiarValor(bbddSeleccionada);
        rutaFicheroDB = this.rutaDBTF.getText();
    }//GEN-LAST:event_LoadDBBActionPerformed

    private void StartBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartBActionPerformed
        boolean parte1 = false, parte2 = false, parte3 = false, parte4 = false;
        boolean vacioIN = false, correctoIN = false;
        boolean vacioDB = false, correctoDB = false;
        rutaFicheroDB = this.rutaDBTF.getText();
        rutaFicheroInput = this.rutaInputTF.getText();
        if (!rutaFicheroDB.isEmpty()) {
            if (rutaFicheroDB.endsWith(".txt")) {
                parte1 = true;
            } else {
                JOptionPane.showMessageDialog(null, "Please, enter a .txt file as Database", "ERROR", 0);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please, choose a .txt as Database", "ERROR", 0);
        }
        if (!rutaInputTF.getText().isEmpty()) {
            if (rutaInputTF.getText().endsWith(".txt")) {
                parte2 = true;
            } else {
                JOptionPane.showMessageDialog(null, "Please, enter a .txt file as Input Network", "ERROR", 0);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please, choose a .txt as Input Network", "ERROR", 0);
        }

        if (parte2 && parte1) {
            parte3 = true;
        }
        getLog().writeLog("Starting",true);
        getLog().timeS();
        if (parte3) {
            archivoInput = new File(rutaFicheroInput);
            if (archivoInput.length() > 0) {
                vacioIN = false;
                correctoIN = true;
                parte4=true;
            } else {
                vacioIN = true;
                correctoIN = false;
            }
            if (vacioIN) {
                JOptionPane.showMessageDialog(null, "I can not read Input Network file, it is empty", "ERROR", 0);
            }
        }
        if (parte4) {
            archivoBD = new File(rutaFicheroDB);
            if (archivoBD.length() > 0) {
                vacioDB = false;
                correctoDB = true;
            } else {
                vacioDB = true;
                correctoDB = false;
            }
            if (vacioDB) {
                JOptionPane.showMessageDialog(null, "I can not read Database file, it is empty", "ERROR", 0);
            }
        }
        if (correctoDB && correctoIN && !vacioIN && !vacioDB) {
            String BD = calcularNombre(rutaFicheroDB), input = calcularNombre(rutaFicheroInput);
            if (!noAlmacenada(BD, rutaDB)) {
                mover(rutaFicheroDB, BD, rutaDB);
            }
            if (!noAlmacenada(input, rutaInput)) {
                mover(rutaFicheroInput, input, rutaInput);
            }
            if (!buscarResultados(BD, input)) {
                //this.habilitarStart(true);
                cambiarTexto("Running: This task could take several minutes, please be patient");
                this.setTitle("GNC ");
                HiloGNC hilo = new HiloGNC(this.grnBD, this.grnEntrada, this.leeBD,this.leeInput, BD, input, rutaComparaciones + System.getProperty("file.separator") + "Results.txt", this, rutaMatrices);
                hilo.start();
                this.openDBB.setEnabled(true);
                this.openINB.setEnabled(true);
                this.rutaInputTF.setText("");
                this.rutaDBTF.setText("");
            } else {
                Object[] options = {"No, I'll see last results", "Yes, rating it again"};
                int n = JOptionPane.showOptionDialog(f, "We have detected that the same operation have been already rated before, would you like to re calculated again?", "Readme!!",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null, //do not use a custom Icon
                        options, //the titles of buttons
                        options[0]); //default button title
                if (n == 0) {
                    this.panelResultados.ordenBusqueda(input);
                } else {
                    //this.habilitarStart(true);
                    cambiarTexto("Running: This task could take several minutes, please be patient");
                    this.setTitle("GNC ");
                    HiloGNC hilo = new HiloGNC(this.grnBD, this.grnEntrada, this.leeBD,this.leeInput, BD, input, rutaComparaciones + System.getProperty("file.separator") + "Results.txt", this, rutaMatrices);
                    hilo.start();                    
                    this.rutaInputTF.setText("");
                    this.rutaDBTF.setText("");
                    this.habilitarStart(false);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Not valid files,check it", "ERROR", 0);
        }


    }//GEN-LAST:event_StartBActionPerformed

    private void openINBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openINBActionPerformed
        String ruta = this.rutaInput;
        File directorio = new File(ruta);
        if (directorio.list().length > 0) {
            buscaInput = new BuscaArchivos(ruta, "input", this);
            buscaInput.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Not Input Networs found", "ERROR", 0);
        }
    }//GEN-LAST:event_openINBActionPerformed

    private void openDBBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDBBActionPerformed
        String ruta = this.rutaDB;
        File directorio = new File(ruta);
        if (directorio.list().length > 0) {
            buscaDB = new BuscaArchivos(ruta, "bd", this);
            buscaDB.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Not Biological Databases found", "ERROR", 0);
        }    }//GEN-LAST:event_openDBBActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        about = new About();
        about.setVisible(true);
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        URL ruta = this.getClass().getResource("UserGuide.pdf");
        try {
            File path2 = new File(ruta.toURI());
            File path = new File(VentanaPrincipal.class.getResource("UserGuide.pdf").toURI());
            Desktop.getDesktop().open(path);
            Desktop.getDesktop().open(path2);
        } catch (IOException ex) {
            System.out.println("ex = " + ex);ex.printStackTrace();
        } catch (URISyntaxException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("ex = " + ex);
        }
    }//GEN-LAST:event_jMenu4MouseClicked

    public boolean cambiarValor(boolean valor) {
        boolean r = false;
        if (valor) {
            r = false;
        } else {
            r = true;
        }
        return r;
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LoadDBB;
    private javax.swing.JButton LoadInputB;
    private javax.swing.JPanel LogoP;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JButton StartB;
    private javax.swing.JProgressBar barra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JPanel logP;
    private javax.swing.JButton openDBB;
    private javax.swing.JButton openINB;
    private javax.swing.JPanel resultadosP;
    private javax.swing.JTextField rutaDBTF;
    private javax.swing.JTextField rutaInputTF;
    // End of variables declaration//GEN-END:variables

    private String calcularNombre(String ruta) {
        int ultIndiceBarra = ruta.lastIndexOf(System.getProperty("file.separator"));
        int ultIndicePunto = ruta.lastIndexOf(".");
        String input = ruta.substring(ultIndiceBarra + 1, ultIndicePunto);
        return input;
    }

    public void cambiarRutas(String input, String DB) {
        this.rutaDBTF.setText(DB);
        this.rutaInputTF.setText(input);
    }

    public void cambiarRutaInput(String ruta) {
        this.rutaInputTF.setText(ruta);
    }

    public void cambiarRutaBD(String bd) {
        this.rutaDBTF.setText(bd);
    }

    private boolean buscarResultados(String BD, String input) {
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        boolean encontrado = false;
        try {
            archivo = new File(this.rutaComparaciones + System.getProperty("file.separator") + "Results.txt");
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            // Lectura del fichero
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] separar = linea.split(";");
                if ((separar[0].compareToIgnoreCase(input) == 0 && separar[1].compareToIgnoreCase(BD) == 0) || (separar[1].compareToIgnoreCase(input) == 0 && separar[0].compareToIgnoreCase(BD) == 0)) {
                    encontrado = true;
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                    br.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return encontrado;
    }

    private void mover(String rutaOrigen, String nomFichero, String rutaDestino) {
        rutaDestino = rutaDestino + System.getProperty("file.separator") + nomFichero + ".txt";
        File origen = new File(rutaOrigen);
        File destino = new File(rutaDestino);
        copyFile(origen, destino);
    }

    private void copyFile(File origen, File destino) {
        try {
            InputStream in = new FileInputStream(origen);
            OutputStream out = new FileOutputStream(destino);

            byte[] buf = new byte[8192];
            int len;

            while ((len = in.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            in.close();
            out.close();

        } catch (IOException ioe) {
            ioe.printStackTrace();
        }
    }

    public List<Comparacion> leerComparaciones(String rutaComparaciones) {
        List<Comparacion> comp = new ArrayList<Comparacion>();
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;

        try {
            // Apertura del fichero y creacion de BufferedReader para poder
            // hacer una lectura comoda (disponer del metodo readLine()).
            archivo = new File(rutaComparaciones);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);

            // Lectura del fichero
            String linea;
            while ((linea = br.readLine()) != null) {
                String[] partes = linea.split(";");
                Comparacion c = new Comparacion(partes[0], partes[1], Integer.parseInt(partes[2]), Integer.parseInt(partes[3]), Integer.parseInt(partes[4]), Integer.parseInt(partes[5]), Float.parseFloat(partes[6]), Float.parseFloat(partes[7]), Float.parseFloat(partes[8]), Float.parseFloat(partes[9]),Float.parseFloat(partes[10]),Integer.parseInt(partes[11]));
                comp.add(c);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // En el finally cerramos el fichero, para asegurarnos
            // que se cierra tanto si todo va bien como si salta 
            // una excepcion.
            try {
                if (null != fr) {
                    fr.close();
                    br.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return comp;
    }

    public void cambiarModeloTabla() {
        List<Comparacion> c = leerComparaciones(rutaComparaciones + System.getProperty("file.separator") + "Results.txt");
        panelResultados.cambiarModelo(c);
    }

    public void habilitarStart(boolean activar) {
        this.StartB.setEnabled(activar);
    }

    private boolean noAlmacenada(String fichero, String directorio) {
        File f = new File(directorio);
        boolean encontrado = false;

        for (int i = 0; i < f.list().length; i++) {
            if (f.list()[i].contains(fichero)) {
                encontrado = true;
                break;
            }
        }
        return encontrado;

    }

    private void clean() {
        File f = new File(System.getProperty("user.dir"));
        String[] lista = f.list();
        for (int i = 0; i < lista.length; i++) {
            File borrar = new File(f + lista[i]);
            if (lista[i].endsWith(".txt") && borrar.isFile() && borrar.length() == 0) {
                borrar.delete();
            }
        }

    }
}
